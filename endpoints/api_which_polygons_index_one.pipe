DESCRIPTION >
	API Endpoint to retrieve the geoname_ids that contain a point passed by its lat and lon.
Improved version reading less data thanks to geohashes indexing.


NODE merge_index_ids_for_coord
DESCRIPTION >
    Using `groupArrayMerge` to compact the MV intermediate states for the geonames present in the same geohash as our coordinates.
    Then `arrayJoin` to unroll the array into several rows.

SQL >

    %
    SELECT arrayJoin(groupArrayMerge(geoname_id)) geoname_id
    FROM geo_index
    WHERE geohash = geohashEncode({{ Float32(lon, 12.5) }}, {{ Float32(lat, 41.9) }}, 3)
    GROUP BY geohash



NODE canidate_geonames
SQL >

    SELECT groupArray((geoname_id, polygon)) candidates
    FROM geonames
    WHERE geoname_id in (SELECT arrayJoin(groupArrayMerge(geoname_id)) geoname_id
    FROM geo_index
    WHERE geohash = geohashEncode({{ Float32(lon, 12.5) }}, {{ Float32(lat, 41.9) }}, 3)
    GROUP BY geohash)



NODE polygon_ids
DESCRIPTION >
    CTE to get the candidates and use them in the `arrayFilter` function to only retrieve the ones that fit the `pointInPolygon`.

SQL >

    %
    WITH
        SELECT groupArray((geoname_id, polygon)) candidates
    FROM geonames
    WHERE geoname_id in (SELECT arrayJoin(groupArrayMerge(geoname_id)) geoname_id
    FROM geo_index
    WHERE geohash = geohashEncode({{ Float32(lon, 12.5) }}, {{ Float32(lat, 41.9) }}, 3)
    GROUP BY geohash) as candidates
    SELECT
        arrayFilter(
            (id, polygon) -> pointInPolygon(({{ Float32(lon, 12.5) }}, {{ Float32(lat, 41.9) }}), polygon),
            candidates .1,
            candidates .2
        ) geoname_ids


